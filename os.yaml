---

- name: Join AD
  hosts: all
  gather_facts: yes
  vars:
    domain_dc: "lab.com"
    comp_ou: "ou=Linux,dc=lab,dc=com"
    passwd: "Password1"
    user_join: 'manuh'

    sssd:
      use_fully_qualified_names : False
      fallback_homedir : /home/%u
      access_provider : ad
      auth_provider : ad
      chpass_provider : ad
      ldap_schema : ad
      dyndns_update : true
      dyndns_refresh_interval : 43200
      dyndns_update_ptr : true
      dyndns_ttl : 3600

  tasks:   

    - set_fact:
        host_name: "{{ ansible_hostname }}.{{ domain_dc }}"  
    
    - name: Set a hostname specifying strategy
      ansible.builtin.hostname:
        name: "{{ host_name }}"
        use: systemd

    - name: Install dependencies
      yum:
        name:
          - adcli
          - realmd
          - sssd
          - oddjob
          - oddjob-mkhomedir
          - samba-common-tools
          - krb5-workstation
          - authselect-compat 
        state: present

    - name: Check realm
      command: realm list
      register: joined
      changed_when: False

    - name: Print REALM
      debug:
        var: joined.stdout
          
    - name: Realm Join
      ansible.builtin.expect:
        command: realm join -U {{ user_join }} --computer-ou="{{ comp_ou }}" --computer-name="{{ ansible_hostname }}.lab.com" "{{domain_dc}}"
        responses:
          Password for *: "{{ passwd }}"
      when: joined.stdout ==""

#    - name: Realm Join
#      shell: echo Password1 | realm join -U manuh --computer-ou="{{ comp_ou }}" --computer-name="{{ ansible_hostname }}.lab.com" {{ domain_dc }}
#      when: joined.stdout ==""
#      notify:
#      - Restart sssd

#    - name: SSSD config file
#      ansible.builtin.copy:
#        src: sssd.conf
#        dest: /etc/sssd/sssd.conf
#        owner: root
#        group: root
#        mode: '0600'
#      notify:
#      - Restart sssd

    - name: SSSD config file
      community.general.ini_file:
        path: /etc/sssd/sssd.conf
        section: "domain/lab.com"
        option: "{{item.key}}"
        value: "{{item.value}}"
      with_dict: "{{ sssd }}"
      when: joined.stdout ==""
      notify: Restart sssd


  handlers:
    - name: Restart sssd
      ansible.builtin.service:
        name: sssd
        state: restarted
        